package abc;

import java.util.HashMap;
import java.util.Map;

class ListNode {
	int val;
	ListNode next;
	ListNode(int val) {
		this.val = val;
	}
}

public class QuickSortLinkedList {

	// quicksort the linked list
    public ListNode sortList(ListNode head) {
    	quicksort(head, null);
    	return head;
    }

    public void quicksort(ListNode left, ListNode right) {
    	if(left != right) {
    		ListNode pivot = partition(left, right);
    		quicksort(left, pivot);
    		quicksort(pivot.next, right);
    	}
    }

    public ListNode partition(ListNode left, ListNode right) {
    	if(left == null) return left;
    	int key = left.val;
    	ListNode pSlow = left;
    	ListNode pFast = left.next;
    	while(pFast != right) {
    	    if(pFast.val < key) {
    	        pSlow = pSlow.next;
    	        exchange(pFast, pSlow);
    	    }
    	    pFast = pFast.next;
    	}
    	exchange(pSlow, left);
    	return pSlow;
    }
    
    public void exchange(ListNode p, ListNode q) {
        int tmp = p.val;
        p.val = q.val;
        q.val = tmp;
    }
    
    public static void main(String[] args) {
    	int[] elements = {1,2,2,2,3,1,1,3,1,1,3,2,1,1,3,3,1,2,1,1,3,3,2,2,1,2,1,3,3,1,3,2,3,2,1,1,3,3,2,3,2,1,3,3,3,2,1,1,1,3,1,2,1,3,2,2,1,1,2,3,1,3,3,1,3,2,3,3,2,2,2,1,1,1,1,1,1,1,3,1,3,2,3,1,2,3,3,1,1,1,1,1,3,1,2,1,3,1,3,2,1,2,2,2,3,3,1,3,1,2,3,1,1,2,3,1,3,3,3,2,1,2,1,2,2,2,2,1,3,2,1,1,1,3,3,1,3,2,3,1,1,1,3,2,2,3,3,3,3,3,1,1,1,2,2,1,3,1,2,1,3,3,2,1,3,2,1,3,1,2,1,2,1,1,1,2,3,1,1,1,2,2,2,3,1,1,2,2,3,3,3,1,3,3,1,2,2,1,2,3,1,2,3,1,3,3,1,3,3,3,2,3,3,3,3,3,3,2,3,3,3,3,1,1,3,2,1,2,1,3,2,3,1,1,2,2,1,1,1,1,2,1,1,3,2,1,3,3,3,2,1,3,1,2,3,2,3,2,2,2,3,1,1,3,3,3,2,3,3,2,1,1,3,3,3,1,1,3,2,3,1,3,3,2,2,2,2,1,2,3,1,2,3,2,1,1,3,2,2,1,2,3,2,1,1,1,3,3,3,1,3,3,2,3,1,2,3,3,3,2,1,2,2,1,3,3,2,2,2,1,1,3,2,1,3,2,3,2,2,1,3,2,3,1,3,3,1,1,1,2,1,2,2,2,3,1,1,2,3,3,3,3,1,3,3,1,3,2,2,1,3,1,2,3,1,2,1,3,1,2,2,3,2,2,1,2,1,2,3,3,3,1,2,1,3,1,1,3,1,3,1,1,3,1,3,1,2,1,3,3,2,2,1,1,2,3,2,2,1,3,2,1,2,3,1,2,3,2,2,1,3,1,3,2,1,1,3,2,3,1,1,2,2,2,3,3,1,1,3,2,2,1,2,2,1,1,2,2,3,1,1,2,2,2,1,1,3,1,1,3,2,3,1,2,1,2,1,2,1,1,2,2,3,3,2,2,2,3,1,3,2,2,2,1,1,1,2,2,3,1,1,2,3,1,1,2,2,1,2,1,1,1,1,3,1,2,3,1,2,1,3,1,3,1,2,3,1,3,3,2,2,3,1,3,2,2,3,3,1,1,3,3,2,1,2,3,2,2,1,3,1,3,3,2,2,1,3,1,1,3,2,3,3,2,2,3,1,2,3,2,1,1,3,3,3,2,3,1,1,3,3,2,2,2,1,2,1,3,1,1,2,3,3,1,1,3,3,1,3,3,1,2,1,2,2,2,3,2,2,3,1,1,2,1,3,2,2,1,1,3,3,3,3,2,2,1,2,1,1,3,3,1,1,2,3,1,3,1,1,3,2,3,1,3,2,2,2,2,3,1,1,1,2,1,3,1,2,1,1,3,3,2,2,1,1,1,2,2,1,1,1,2,3,2,2,3,2,1,2,2,3,2,1,3,3,2,2,1,3,3,1,2,1,3,3,3,3,1,2,2,1,1,1,3,2,2,2,2,1,3,3,2,1,3,2,2,3,2,2,1,2,1,2,1,1,1,3,2,3,1,2,2,2,2,3,2,2,3,3,1,2,3,3,3,3,1,2,3,3,3,1,2,1,1,3,1,2,2,3,1,3,2,2,3,2,3,3,2,3,1,2,2,2,2,2,2,1,3,1,2,1,3,3,3,2,3,1,1,2,3,3,1,2,1,1,2,3,2,3,3,2,1,3,3,3,1,2,2,2,3,2,3,3,1,3,1,3,1,3,2,3,3,1,3,2,2,2,2,1,3,1,2,2,3,3,1,2,2,3,2,2,1,1,1,3,2,3,3,2,3,1,1,1,2,1,2,1,3,1,1,1,1,1,1,2,3,2,3,1,3,3,2,1,3,3,2,2,3,2,3,1,2,1,2,1,2,2,3,2,1,3,2,2,3,3,1,1,1,3,3,3,2,2,3,2,2,2,3,1,2,1,1,3,1,3,3,3,2,1,3,2,2,3,1,3,3,2,1,2,3,3,1,2,3,2,1,1,3,1,2,1,3,2,1,1,3,1,3,2,1,2,1,1,2,2,2,3,1,3,1,3,1,1,1,2,3,2,1,3,2,1,3,2,2,2,1,1,1,3,3,1,1,3,3,2,2,2,1,1,2,1,2,1,3,3,3,1,1,1,1,2,1,1,3,2,1,1,3,3,3,3,1,2,3,3,2,1,2,1,3,2,3,1,2,1,1,2,3,2,3,2,3,3,2,1,1,3,2,1,2,2,3,3,3,3,2,2,2,1,3,3,3,2,1,3,3,2,1,1,3,2,1,2,2,2,3,1,1,1,3,3,2,3,3,3,3,2,3,2,2,3,1,1,1,3,2,3,2,2,1,1,3,1,3,1,1,2,2,1,3,3,3,2,1,1,3,3,1,2,2,3,3,1,1,1,3,2,3,2,3,3,2,1,1,1,1,2,3,2,3,3,1,1,3,1,2,1,1,2,2,2,2,1,3,1,3,3,3,3,3,3,3,1,3,3,2,1,1,2,2,1,2,3,2,3,1,3,1,1,3,2,1,2,1,2,2,3,1,2,1,3,2,1,3,2,3,3,2,3,3,1,3,2,2,1,3,2,2,3,2,2,2,1,2,3,2,3,3,3,2,3,1,3,3,1,3,3,3,3,1,2,2,2,1,3,3,3,2,3,1,1,2,3,3,3,1,3,3,1,2,3,1,3,1,3,2,1,1,3,3,3,2,2,3,3};
    	
    	QuickSortLinkedList test = new QuickSortLinkedList();
    	ListNode head = new ListNode(1);
    	ListNode p = head;
    	for(int e: elements) {
    		p.next = new ListNode(e);
    		p = p.next;
    	}
    	ListNode sortedList = test.sortList(head);
    	ListNode q = sortedList;
    	while(q != null) {
    		System.out.print(q.val + ", ");
    		q = q.next;
    	}
    	
    	Map<Integer, String> list = new HashMap<Integer, String>();
    }
}